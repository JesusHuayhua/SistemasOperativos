#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NUMBER_OF_THREADS 10

void *print_hello_world(void *tid){
	long id;
	id = (long)tid;
	fprintf(stderr, "Hello World. Greetings from thread %ld\n",id);
	pthread_exit(NULL);
}

int main(int argc, char *argv[]){
	pthread_t threads[NUMBER_OF_THREADS];
	int status;
	long i;
	for(i = 0; i < NUMBER_OF_THREADS; i++){
		printf("Main here. Creating thread %d\n",i);
		status = pthread_create(&threads[i],NULL,print_hello_world, (void *)i);
		if ( status != 0 ){
			printf("Oops. pthread create returned error code %d\n",status);
			exit(-1);
		}
	}
	exit(0);
}
#include <sys/un.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>

#include <unistd.h>
#include <errno.h>
#include <string.h>

#define SV_SOCK_PATH "/tmp/us_xfr"
#define BUF_SIZE 100

int main(int argc, char *argv[]){
    struct sockaddr_un addr;
    int sfd;
    ssize_t numRead;
    char buf[BUF_SIZE];

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == -1)
        perror("socket");

    memset(&addr,0,sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, SV_SOCK_PATH, sizeof(addr.sun_path) - 1);
    if (connect(sfd, (struct sockaddr *) &addr,
        sizeof(struct sockaddr_un)) == -1) {
        perror("connect");
    }
    while( (numRead = read(STDIN_FILENO,buf,BUF_SIZE)) > 0)
        if (write(sfd, buf, numRead) != numRead)
            perror("partial/failed write");

    if(numRead == -1)
        perror("read");

    exit(EXIT_SUCCESS);

}
#include <sys/un.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>

#include <time.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#define SV_SOCK_PATH "/tmp/us_xfr"

#define BUF_SIZE 100

#define BACKLOG 5

int main(int argc, char *argv[]){
    struct sockaddr_un addr;
    int sfd,cfd;
    ssize_t numRead;
    char buf[BUF_SIZE];

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == -1)
        perror("socket");
    if (remove(SV_SOCK_PATH) == -1 && errno != ENOENT)
        perror("remove");

    memset(&addr,0,sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, SV_SOCK_PATH, sizeof(addr.sun_path));

    if (bind(sfd, (struct sockaddr *)&addr,sizeof(struct sockaddr_un)) == -1)
        perror("bind");

    if (listen(sfd,BACKLOG) == -1) {
        perror("listen");
    }
    for ( ;  ;  ) {
        cfd = accept(sfd, NULL, NULL);
        if(cfd == -1)
            perror("accept");
        while( (numRead = read(cfd, buf, BUF_SIZE)) > 0)
            if(write(STDOUT_FILENO, buf, numRead) != numRead)
                perror("partial/failed write");
        if (numRead == -1) {
            perror("read");
        }
        if (close(cfd) == -1) {
            perror("close");
        }
    }


    exit(EXIT_SUCCESS);

}
